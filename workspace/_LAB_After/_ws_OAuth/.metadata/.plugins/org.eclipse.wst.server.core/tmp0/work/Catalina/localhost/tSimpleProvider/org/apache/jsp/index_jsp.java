/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2014-09-12 05:52:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>OAuth Simple Provider Example!</h1>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t-----------------------------------<br/>\r\n");
      out.write("\tConsumer 등록 단계 <br/>\r\n");
      out.write("\t-----------------------------------<br/>\t\r\n");
      out.write("\t1. 사용자 ID로 로그인한다. 미리 제공되는 ID는 gdhong, user1, user2. 암호는 모두 12345!!<br/>\r\n");
      out.write("\t2. Application 등록 페이지로 이동하여 Application Name과 Callback URL을 입력하고 등록버튼을 생성한다.<br/>\r\n");
      out.write("\t3. Consumer Key & Consumer Secret 과 Access Token & Access Token Secret을 생성하여 tbl_users\r\n");
      out.write("\t테이블에 등록한다. <br/><br/>\r\n");
      out.write("\t-----------------------------------<br/>\r\n");
      out.write("\trequestToken 요청 단계  - request_token 서블릿<br/>\r\n");
      out.write("\t-----------------------------------<br/>\r\n");
      out.write("\t1. Consumer가 request Token을 요청해오면 요청 정보를 파싱한다.<br/>\r\n");
      out.write("\t2. 요청 정보 내용<br/>\r\n");
      out.write("\t  - oauth_consumer_key : <br/>\r\n");
      out.write("\t  - oauth_signature_method :<br/>\r\n");
      out.write("\t  - oauth_timestamp :<br/>\r\n");
      out.write("\t  - oauth_nonce :<br/>\r\n");
      out.write("\t  - oauth_callback : <br/>\r\n");
      out.write("\t  - oauth_signature :<br/><br/>\r\n");
      out.write("\t  \r\n");
      out.write("\t3. 확인할 내용<br/>\r\n");
      out.write("\t  - consumer_key에 해당하는 레코드를 tbl_oauth_key 테이블에서 읽어냄. --> 레코드가 없으면 오류!!<br/>\r\n");
      out.write("\t  - consumersecret값을 읽어냄 -> 이값으로 consumerkey~callback까지를 서명하여 생성한 값이 \r\n");
      out.write("\t          전송된 oauth_signature값과 일치하느지 여부 확인. --> 일치하지 않으면 오류!! <br/>\r\n");
      out.write("\t  - oauth_timestamp 값의 시간값과 서버에서 생성한 timestamp값의 차이가 10분 이상(이것은 \r\n");
      out.write("\t         서비스 프로바이더가 기준을 세워야 함.)이라면 유효한 request가 아니라고 판단하여 오류발생!!<br/>\r\n");
      out.write("\t  - callbackUrl: 값이 전송되지 않았다면, callbackUrl이 인증 후 이동하는 경로가 됨.<br/>\r\n");
      out.write("\t  - 모두 정상적이라면 requesttoken과 request token secret 생성하고, \r\n");
      out.write("\t     tbl_request_token 테이블에 레코드 저장 \r\n");
      out.write("\t     --> 저장데이터는  requesttoken,request token secret, consumer key<br/> \r\n");
      out.write("\t4. 확인이 완료되었다면, 다음 정보를 Consumer에게 전송<br/>\r\n");
      out.write("      - oauth_token : request_token<br/>\r\n");
      out.write("      - oauth_token_secret : request_token_secret<br/>\r\n");
      out.write("      - oauth_callback_confirmed : true<br/>\r\n");
      out.write("      - 이외의 추가적인 파라미터<br/><br/>\r\n");
      out.write(" \t-----------------------------------<br/>\r\n");
      out.write("\tAuthorize 요청 단계- authorize 서블릿<br/>\r\n");
      out.write("\t-----------------------------------<br/>     \r\n");
      out.write("    1. 요청 정보를 확인하여 oauth_token 값을 파싱한다.<br/>\r\n");
      out.write("    2. 로그인 페이지로 이동한다. --> 로그인하고 승인하도록 한다. 만일 로그인된 상태라면,\r\n");
      out.write("                  승인버튼을 클릭하여 승인하도록 한다.<br/>\r\n");
      out.write("    3. 승인버튼을 클릭하면, tbl_request_token 테이블에서 request_token(oauth_token) 값에 대한 레코드를 \r\n");
      out.write("                찾아 verifier 값을 생성한 다음 레코드 값을 변경한다. (비어있던 verifier 필드값 생성)<br/>\r\n");
      out.write("    4. 그런 후 미리 등록하거나 요청받은 callback URL로 이동시킨다.\r\n");
      out.write("                이동시킬 때 oauth_token과 verifier 값을 queryString 형태로 붙여 전송한다.<br/><br/>\r\n");
      out.write("\t      \r\n");
      out.write(" \t-----------------------------------<br/>\r\n");
      out.write("\tAccessToken 요청 단계 <br/> - access_token 서블릿<br/>\r\n");
      out.write("\t-----------------------------------<br/>     \r\n");
      out.write("\t1. 요청 정보를 확인하여 각 정보를 파싱한다.\r\n");
      out.write("\t    - oauth_consumer_key :\r\n");
      out.write("\t\t- oauth_signature_method :\r\n");
      out.write("\t\t- oauth_token :\r\n");
      out.write("\t\t- oauth_verifier : \r\n");
      out.write("\t\t- oauth_callback : \r\n");
      out.write("\t\t- oauth_timestamp : \r\n");
      out.write("\t\t- oauth_nonce : \r\n");
      out.write("\t\t- oauth_signature : \r\n");
      out.write("\t2. 1에서 oauth_signature값은 나머지 값을 HMAC + Consumer Secret 으로 서명한 결과값 의미한다.\r\n");
      out.write("\t3. Consumer Key 정보를 이용하여 tbl_auth_key 테이블에서 Consumer Key에 대한 레코드 정보를 로딩한다.\r\n");
      out.write("\t4. 요청 정보에서, oauth_signature값과, 나머지 값들을 테이블에서 읽어낸 Consumer Secret 값으로 \r\n");
      out.write("\t    서명한 값을 비교하여 동일한지를 확인한다. 다르다면 오류 페이지로!!\r\n");
      out.write("    5. oauth_timestamp 값의 시간 값과 서버에서 생성한 timestamp값의 차이가 10분 이상(이것은 \r\n");
      out.write("\t         서비스 프로바이더가 기준을 세워야 함.)이라면 유효한 request가 아니라고 판단하여 오류발생!!<br/>\r\n");
      out.write("\t6. 앞의 모든 과정이 순조롭다면, tbl_request_token 테이블의 레코드중 oauth_token에 해당하는 \r\n");
      out.write("\t     레코드를 삭제하고\r\n");
      out.write("\t7. Consumer 테이블의 Consumer Key에 해당하는 Access Token 정보 쌍(oauthtoken, \r\n");
      out.write("\t   oauthtokensecret 필드값)을 읽어내어 Consumer에게 응답한다.\r\n");
      out.write("\t\r\n");
      out.write("\t-------------------------------------<br/>\r\n");
      out.write("\tAccess Token 과 Access TOken Secret을 받은 Consumer의 처리<br/>\r\n");
      out.write("    : Consumer는 Request Token & Secret 대신 Access Token & Secret을 넘겨받았다.<br/>\r\n");
      out.write("       이정보를 이용해 서명하여 Provider에게 보호된 자원을 요청한다.<br/>\r\n");
      out.write("\t-------------------------------------<br/>\r\n");
      out.write("\t1. 다음 정보를 생성한 정보와 함께 Protected Resource에 접근한다.<br/>\r\n");
      out.write("\t- oauth_consumer_key :<br/>\r\n");
      out.write("\t- oauth_token : Access Token<br/>\r\n");
      out.write("\t- oauth_signature_method :<br/>\r\n");
      out.write("    - oauth_timestamp : <br/>\r\n");
      out.write("\t- oauth_nonce :<br/>\r\n");
      out.write("\t- oauth_version :<br/>\r\n");
      out.write("\t- oauth_signature : Access Token Secret으로 앞의 값들을 서명한 값!! <br/>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
