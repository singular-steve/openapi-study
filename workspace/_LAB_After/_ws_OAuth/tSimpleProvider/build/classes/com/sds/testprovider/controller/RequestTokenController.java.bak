package com.sds.testprovider.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.thinker.oauth.parameter.RequestTokenParam;
import org.thinker.oauth.util.OAuthException;

import com.sds.testprovider.model.ConsumerVO;
import com.sds.testprovider.model.RequestTokenVO;
import com.sds.testprovider.service.ConsumerService;
import com.sds.testprovider.service.RequestTokenService;
import com.sds.testprovider.util.TokenGenerator;

@Controller
public class RequestTokenController {

	@Autowired
	private ConsumerService consumerService;

	@Autowired
	private RequestTokenService requestTokenService;
	
	@RequestMapping(value="request_token")
	public ModelAndView requestToken(HttpServletRequest request) throws OAuthException {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("request_token");
		
		//1. QueryString 또는 Post 파라미터 파싱
		RequestTokenParam param = new RequestTokenParam(request);
		System.out.println("### requestTokenParam : " + param.getConsumerKey());
		//2. tbl_oauth_key 테이블에서 ConsumerSecret 정보 읽어옴.
		ConsumerVO consumerVO;
		String consumerSecret;
		try {
			consumerVO = consumerService.selectByConsumerKey(param.getConsumerKey());
			consumerSecret = consumerVO.getConsumerSecret();
		} catch (Exception e1) {
			throw new OAuthException("Consumer Key & Secret is not valid.");
		}

		System.out.println("### ConsumerVO : " + consumerVO);
		try {
			//3. signature validation!! 유효하지 않으면 예외 발생!
			param.validateRequestToken(consumerSecret);
			//4. 유효하다면 RequestToken 생성하여 tbl_request_token에 저장!!
			//실무에서는 ServletContext 와 같은 정보(공유데이터)에 저장...
			RequestTokenVO tokenVO = new RequestTokenVO();
			tokenVO.setConsumerKey(consumerVO.getConsumerKey());
			//parameter로 넘어온 callback이 해당 ConsumerKey로 등록된 
			//callbackurl과 일치하는지 확인한 후에 oauth_callback_confirmed 값을 
			//true로 부여하도록 수정가능함.
			//authorize 처리후 반드시 등록된 callback으로만 redirect하도록 
			//강제할 필요성도 있음.
			tokenVO.setCallback(param.getCallback());
			TokenGenerator.generateRequestToken(tokenVO);
			requestTokenService.createRequestToken(tokenVO);
			
			System.out.println("### tokenVO2 : " + tokenVO);
			
			String oauth_callback_confirmed = "true";
			
			StringBuilder builder = new StringBuilder();
			builder.append("oauth_token=" + tokenVO.getRequestToken() +"&");
			builder.append("oauth_token_secret=" + tokenVO.getRequestTokenSecret() +"&");
			builder.append("oauth_callback_confirmed=" + oauth_callback_confirmed);
			
			mav.addObject("isValid", true);
			mav.addObject("message", builder.toString());
		} catch (Exception e) {
			throw new OAuthException("Consumer Key & Secret is not valid.");
		}
		 
		return mav;
	}
}
